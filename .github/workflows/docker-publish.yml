name: Build, Push to Docker Hub, and Deploy

on:
  push:
    branches: [ "main" ] # Запускать при пуше в ветку 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Запускать на последней версии Ubuntu
    permissions:
      contents: read
      packages: write # Разрешения для доступа к содержимому репозитория и записи пакетов

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Шаг для клонирования репозитория

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Шаг для входа в Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Имя пользователя Docker Hub из секретов GitHub
          password: ${{ secrets.DOCKER_PASSWORD }} # Пароль Docker Hub из секретов GitHub

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # Шаг для сборки и отправки Docker образа
        with:
          push: true # Разрешить отправку образа
          tags: ${{ secrets.DOCKER_USERNAME }}/vpn-api:latest # Тег образа: ваш_username_dockerhub/vpn-api:latest
          context: . # Контекст сборки (текущая директория)

  deploy:
    needs: build-and-push # Этот job зависит от успешного завершения 'build-and-push'
    runs-on: ubuntu-latest # Запускать на последней версии Ubuntu

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0 # Шаг для выполнения команд по SSH
        with:
          host: ${{ secrets.SSH_HOST }} # IP или домен сервера из секретов GitHub
          username: ${{ secrets.SSH_USERNAME }} # Имя пользователя SSH из секретов GitHub
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Приватный ключ SSH из секретов GitHub
          script: |
            echo "Pulling latest Docker image..."
            # Вытягиваем последний образ из Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/vpn-api:latest

            echo "Stopping existing container (if any)..."
            # Останавливаем существующий контейнер, если он запущен
            docker stop vpn-api-container || true

            echo "Removing existing container (if any)..."
            # Удаляем существующий контейнер
            docker rm vpn-api-container || true

            echo "Running new container..."
            # Убедитесь, что порты соответствуют вашему приложению
            docker run -d --name vpn-api-container --env-file /root/SvoiVPN/.env ${{ secrets.DOCKER_USERNAME }}/vpn-api:latest

            echo "Deployment complete!"
